#!/bin/bash

# -------------------------------------------------------------------------------------------
#                                 Setup all the Variables and Paths
# -------------------------------------------------------------------------------------------
echo "------------------------------------ VARIABLES ----------------------------------------"

# Establish the base repository reference directory
THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
REPOSITORY_DIR="$( dirname $THIS_DIR )"
REPOSITORY_CONFIG_FILE="$REPOSITORY_DIR/repository-setup/repository-config.ini"

echo "THIS_DIR=$THIS_DIR"
echo "REPOSITORY_DIR=$REPOSITORY_DIR"
echo "REPOSITORY_CONFIG_FILE=$REPOSITORY_CONFIG_FILE"

if [ ! -f $REPOSITORY_CONFIG_FILE ]; then
    echo "ERROR: Repository config file not found."
    echo "    location=$REPOSITORY_CONFIG_FILE"
    exit 1
fi

# Setup our local directory
CACHE_DIR="$REPOSITORY_DIR/.cache"
if [ ! -d $CACHE_DIR ]; then
    mkdir $CACHE_DIR
fi

REQUIREMENTS_FILE="$REPOSITORY_DIR/source/requirements.txt"
INITIALIZED_FILE="$CACHE_DIR/initialized"
VIRTUAL_ENV_DIR="$REPOSITORY_DIR/.venv"

ENV_FILE="$REPOSITORY_DIR/.env"
if [ ! -f $ENV_FILE ]; then
    echo "ERROR: Development environment file not found. Did you run the 'repository-setup' script."
    echo "    location=$ENV_FILE"
    exit 1
fi

echo "ENV_FILE=$ENV_FILE"

PYTHON_VERSION=""

source $ENV_FILE

# The PYTHON_VERSION can be pinned in the development environment config
if [ -z "$PYTHON_VERSION" ]
then
    echo "ERROR: The 'PYTHON_VERSION' variable should be set in the development environment file."
    echo "    location=$ENV_FILE"
    exit 1
fi

echo "PYTHON_VERSION=$PYTHON_VERSION"
echo "VIRTUAL_ENV_DIR=$VIRTUAL_ENV_DIR"
echo "---------------------------------------------------------------------------------------"


# -------------------------------------------------------------------------------------------
#                                 Perform Reset if Required
# -------------------------------------------------------------------------------------------
if [ "$1" == "reset" ]; then
    rm -fr $VIRTUAL_ENV_DIR
    rm -f $INITIALIZED_FILE
fi

# -------------------------------------------------------------------------------------------
#                                 Virtual Environment Commanline Customization
# -------------------------------------------------------------------------------------------
function customize_activate_script() {
    
    ACTIVATE_SCRIPT="$VIRTUAL_ENV_DIR/bin/activate"

    echo "# ================ Development Environment Customizations ================"
    echo ""  >> $ACTIVATE_SCRIPT
    echo "source $DEV_ENV_FILE" >> $ACTIVATE_SCRIPT
    echo "" >> $ACTIVATE_SCRIPT

    # Custom commandline addition
    COMMAND_ALIAS=""
    CUSTOM_CLI_ENTRY_SCRIPT=""

    if [ ! -z "$CUSTOM_CLI_ENTRY_SCRIPT" || ! -z "$CUSTOM_CLI_ENTRY_SCRIPT" ]
    then
        if [ ! -z "$CUSTOM_CLI_ENTRY_SCRIPT" && ! -z "$CUSTOM_CLI_ENTRY_SCRIPT" ]
        then
		echo "# Create an alias for the `$COMMAND_ALIAS` command" >> $ACTIVATE_SCRIPT
		echo "alias $COMMAND_ALIAS=\"python3 $CUSTOM_CLI_ENTRY_SCRIPT\"" >> $ACTIVATE_SCRIPT
		echo ""  >> $ACTIVATE_SCRIPT
        fi
    else
        echo "To add a custom commandline, you must set both 'COMMAND_ALIAS' and 'CUSTOM_CLI_ENTRY_SCRIPT'"
        exit 1
    fi
    
}

# -------------------------------------------------------------------------------------------
#                                 Create the Virtual Environment
# -------------------------------------------------------------------------------------------
echo
echo
echo "---------------------------- VIRTUAL ENVIRONMENT CREATION -----------------------------"
if [ ! -f $INITIALIZED_FILE ]; then

    virtualenv -p python3 $VIRTUAL_ENV_DIR

    if [ -f $VIRTUAL_ENV_DIR/bin/activate ]; then
        source $VIRTUAL_ENV_DIR/bin/activate

        # MSCODE Environment Dependencies
        pip3 install rope
        pip3 install debugpy
        pip3 install pycrunch-trace

        # Install pylint into the virtual environment
        pip3 install coverage
        pip3 install cython
        pip3 install click<8.0
        pip3 install rich
        pip3 install ipython
       
        # Development Modules
        pip3 install "docutils<0.17" # We need this for sphinx_rtd_theme
        pip3 install myst-parser
        pip3 install sphinx
        pip3 install sphinx_rtd_theme

        if [ -f $REQUIREMENTS_FILE ]; then
            # Install dependencies into the virtual environment
            pip3 install -r $REQUIREMENTS_FILE
        fi

	customize_activate_script

        touch $INITIALIZED_FILE

        # Exit the virtual environment
        deactivate
    else
        echo "ERROR: Unable to create or find the python virtual environment"
        exit 1
    fi

else
    echo "Virtual environment already intialized..."
fi

echo "---------------------------------------------------------------------------------------"
